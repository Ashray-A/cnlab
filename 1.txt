#include <iostream>
#include <climits>
#include <vector>
#include <algorithm>
using namespace std;

const int MAX = 10;

void dijkstra(int graph[MAX][MAX], int n, int src) {
    int dist[MAX], parent[MAX];
    bool visited[MAX] = {false};
    
    fill(dist, dist + n, INT_MAX);
    fill(parent, parent + n, -1);
    dist[src] = 0;

    for(int count = 0; count < n-1; count++) {
        int u = -1, minDist = INT_MAX;
        for(int i = 0; i < n; i++)
            if(!visited[i] && dist[i] < minDist) 
                u = i, minDist = dist[i];
        
        if(u == -1) break;
        visited[u] = true;

        for(int v = 0; v < n; v++)
            if(graph[u][v] && !visited[v] && dist[u] != INT_MAX 
            && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
                parent[v] = u;
            }
    }

    cout << "\nShortest paths from node " << src << ":\n";
    for(int i = 0; i < n; i++) {
        cout << "Node " << i << ": ";
        if(dist[i] == INT_MAX) {
            cout << "INF\n";
            continue;
        }
        
        vector<int> path;
        for(int curr = i; curr != -1; curr = parent[curr])
            path.push_back(curr);
        
        reverse(path.begin(), path.end());
        
        cout << dist[i] << "\tPath: ";
        for(size_t j = 0; j < path.size(); j++)
            cout << path[j] << (j < path.size()-1 ? "->" : "\n");
    }
}

int main() {
    int n, graph[MAX][MAX], src;
    
    cout << "Enter number of nodes (2-10): ";
    cin >> n;
    
    cout << "Enter adjacency matrix (0 for no edge):\n";
    for(int i = 0; i < n; i++)
        for(int j = 0; j < n; j++)
            cin >> graph[i][j];
    
    cout << "Enter source node: ";
    cin >> src;
    
    dijkstra(graph, n, src);
    return 0;
}



Sample Input:
```
6

0 2 1 99 99 1 
2 0 99 2 1 99 
1 99 0 99 2 2 
99 2 99 0 1 5 
99 1 2 1 0 99 
1 99 2 5 99 0

0

