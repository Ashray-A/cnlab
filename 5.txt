#include <stdio.h>

int ham[12]; // Hamming code (positions 1-11)

void calcParity() {
    // Calculate parity bits (positions 1,2,4,8)
    ham[1] = (ham[3] + ham[5] + ham[7] + ham[9] + ham[11]) % 2;
    ham[2] = (ham[3] + ham[6] + ham[7] + ham[10] + ham[11]) % 2;
    ham[4] = (ham[5] + ham[6] + ham[7]) % 2;
    ham[8] = (ham[9] + ham[10] + ham[11]) % 2;
}

void fixError() {
    int p1 = (ham[1] + ham[3] + ham[5] + ham[7] + ham[9] + ham[11]) % 2;
    int p2 = (ham[2] + ham[3] + ham[6] + ham[7] + ham[10] + ham[11]) % 2;
    int p4 = (ham[4] + ham[5] + ham[6] + ham[7]) % 2;
    int p8 = (ham[8] + ham[9] + ham[10] + ham[11]) % 2;
    int error = p8*8 + p4*4 + p2*2 + p1;

    if(error) {
        printf("\nError at position %d. Correcting...\n", error);
        ham[error] ^= 1;
    }
}

int main() {
    printf("Enter 7 data bits (space separated): ");
    scanf("%d %d %d %d %d %d %d", 
          &ham[3], &ham[5], &ham[6], &ham[7], 
          &ham[9], &ham[10], &ham[11]);

    calcParity();
    printf("\nEncoded Hamming code:\n");
    for(int i=1; i<=11; i++) printf("%d ", ham[i]);

    printf("\n\nIntroduce error? (1=Yes/0=No): ");
    int choice;
    scanf("%d", &choice);
    if(choice == 1) {
        printf("Enter error position (1-11): ");
        int pos;
        scanf("%d", &pos);
        ham[pos] ^= 1;
        printf("\nCorrupted code:\n");
        for(int i=1; i<=11; i++) printf("%d ", ham[i]);
    }

    fixError();
    printf("\n\nCorrected code:\n");
    for(int i=1; i<=11; i++) printf("%d ", ham[i]);

    return 0;
}



Enter 7 data bits (space separated): 1 1 0 1 0 1 0
Encoded Hamming code:
0 1 1 0 1 0 1 1 0 1 0 

Introduce error? (1=Yes/0=No): 1
Enter error position (1-11): 10

Corrupted code:
0 1 1 0 1 0 1 1 0 0 0 
Error at position 10. Correcting...

Corrected code:
0 1 1 0 1 0 1 1 0 1 0 